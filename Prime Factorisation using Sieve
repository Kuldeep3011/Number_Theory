#include<bits/stdc++.h>
using namespace std;
const int maxi=1e6+5;
// spf[i] will store the smallest prime factor of i
int spf[maxi]; 
// Indexing is 1-based
void sieve()
{   
    memset(spf,-1,sizeof(spf));
    spf[1]=1;
    // smallest prime factor of all even numbers will be 2
    for(int i=2;i<maxi;i+=2)
    spf[i]=2;
    // finding smallest prime factor of every number
    for(int i=2;i*i<maxi;i++)
    {
        if(spf[i*i]==-1)
        {
            for(int j=i*i;j<maxi;j+=i)
            {
              if(spf[j]==-1)    
              spf[j]=i;
            }
            spf[i]=i;
        }
    }
}
// this function will return the prime factorisation of number N in  O(log(N)) time complexity 
vector<int> prime_factorisation(int n)
{ 
    vector<int> ans;
    while(spf[n]!=n)
    {
        ans.push_back(spf[n]);
        n=n/spf[n];
    }
    if(n!=1)
    ans.push_back(spf[n]);
    return ans;
}
int main()
{
    sieve();
    int n;
    cin>>n;
    vector<int> v=prime_factorisation(n);
    for(int i=0;i<v.size();i++)
    cout<<v[i]<<" ";
    
  return 0;
}
